[
    {
        "label": "callback",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Output",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "callback",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Output",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "no_update",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "callback",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Output",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "dcc",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Dash",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "dash_leaflet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dash_leaflet",
        "description": "dash_leaflet",
        "detail": "dash_leaflet",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "group_data_by_sampletime",
        "importPath": "src.data.process_data",
        "description": "src.data.process_data",
        "isExtraImport": true,
        "detail": "src.data.process_data",
        "documentation": {}
    },
    {
        "label": "fix_line_coordinates",
        "importPath": "src.data.process_lines",
        "description": "src.data.process_lines",
        "isExtraImport": true,
        "detail": "src.data.process_lines",
        "documentation": {}
    },
    {
        "label": "fix_line_coordinates",
        "importPath": "src.data.process_lines",
        "description": "src.data.process_lines",
        "isExtraImport": true,
        "detail": "src.data.process_lines",
        "documentation": {}
    },
    {
        "label": "src.components.map",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "src.components.map",
        "description": "src.components.map",
        "detail": "src.components.map",
        "documentation": {}
    },
    {
        "label": "get_initial_center",
        "importPath": "src.components.map",
        "description": "src.components.map",
        "isExtraImport": true,
        "detail": "src.components.map",
        "documentation": {}
    },
    {
        "label": "calculate_direction_diff",
        "importPath": "src.utils.line_utils",
        "description": "src.utils.line_utils",
        "isExtraImport": true,
        "detail": "src.utils.line_utils",
        "documentation": {}
    },
    {
        "label": "get_color_from_angle",
        "importPath": "src.utils.line_utils",
        "description": "src.utils.line_utils",
        "isExtraImport": true,
        "detail": "src.utils.line_utils",
        "documentation": {}
    },
    {
        "label": "create_heading_line",
        "importPath": "src.utils.map_utils",
        "description": "src.utils.map_utils",
        "isExtraImport": true,
        "detail": "src.utils.map_utils",
        "documentation": {}
    },
    {
        "label": "create_point_marker",
        "importPath": "src.utils.map_utils",
        "description": "src.utils.map_utils",
        "isExtraImport": true,
        "detail": "src.utils.map_utils",
        "documentation": {}
    },
    {
        "label": "process_lines_with_fix",
        "importPath": "src.utils.map_utils",
        "description": "src.utils.map_utils",
        "isExtraImport": true,
        "detail": "src.utils.map_utils",
        "documentation": {}
    },
    {
        "label": "processed_forward",
        "importPath": "src.callbacks.map_callbacks",
        "description": "src.callbacks.map_callbacks",
        "isExtraImport": true,
        "detail": "src.callbacks.map_callbacks",
        "documentation": {}
    },
    {
        "label": "button_style",
        "importPath": "src.utils.button_utils",
        "description": "src.utils.button_utils",
        "isExtraImport": true,
        "detail": "src.utils.button_utils",
        "documentation": {}
    },
    {
        "label": "src.components.controls",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "src.components.controls",
        "description": "src.components.controls",
        "detail": "src.components.controls",
        "documentation": {}
    },
    {
        "label": "src.components.popup",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "src.components.popup",
        "description": "src.components.popup",
        "detail": "src.components.popup",
        "documentation": {}
    },
    {
        "label": "dash_bootstrap_components",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dash_bootstrap_components",
        "description": "dash_bootstrap_components",
        "detail": "dash_bootstrap_components",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "LinearSegmentedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "layout",
        "importPath": "src.components",
        "description": "src.components",
        "isExtraImport": true,
        "detail": "src.components",
        "documentation": {}
    },
    {
        "label": "control_callbacks",
        "importPath": "src.callbacks",
        "description": "src.callbacks",
        "isExtraImport": true,
        "detail": "src.callbacks",
        "documentation": {}
    },
    {
        "label": "map_callbacks",
        "importPath": "src.callbacks",
        "description": "src.callbacks",
        "isExtraImport": true,
        "detail": "src.callbacks",
        "documentation": {}
    },
    {
        "label": "style_callbacks",
        "importPath": "src.callbacks",
        "description": "src.callbacks",
        "isExtraImport": true,
        "detail": "src.callbacks",
        "documentation": {}
    },
    {
        "label": "interval_state",
        "kind": 2,
        "importPath": "src.callbacks.control_callbacks",
        "description": "src.callbacks.control_callbacks",
        "peekOfCode": "def interval_state(radio_value: str):\n    if radio_value == \"Play\":\n        return True\n    else:\n        return False\n@callback(\n    Output(\"play-pause-button\", \"children\"),\n    Input(\"play-pause-button\", \"n_clicks\"),\n)\ndef toggle_play_pause(n_clicks):",
        "detail": "src.callbacks.control_callbacks",
        "documentation": {}
    },
    {
        "label": "toggle_play_pause",
        "kind": 2,
        "importPath": "src.callbacks.control_callbacks",
        "description": "src.callbacks.control_callbacks",
        "peekOfCode": "def toggle_play_pause(n_clicks):\n    return \"Pause\" if n_clicks % 2 else \"Play\"\n@callback(\n    Output(\"modal\", \"is_open\"),\n    Output(\"probabilities\", \"value\"),\n    Input(\"probabilities\", \"value\"),\n    Input(\"modal\", \"is_open\"),\n    prevent_initial_call=True,\n)\ndef toggle_modal(selected_value, is_open):",
        "detail": "src.callbacks.control_callbacks",
        "documentation": {}
    },
    {
        "label": "toggle_modal",
        "kind": 2,
        "importPath": "src.callbacks.control_callbacks",
        "description": "src.callbacks.control_callbacks",
        "peekOfCode": "def toggle_modal(selected_value, is_open):\n    if selected_value == \"transition\":\n        return True, \"off\"\n    else:\n        return is_open, selected_value",
        "detail": "src.callbacks.control_callbacks",
        "documentation": {}
    },
    {
        "label": "animate_lines",
        "kind": 2,
        "importPath": "src.callbacks.map_callbacks",
        "description": "src.callbacks.map_callbacks",
        "peekOfCode": "def animate_lines(\n    _,\n    __,\n    points,\n    lines,\n    map_center,\n    all_clicks,\n):\n    sampletimes = sorted(processed_forward.keys())\n    n_intervals = all_clicks",
        "detail": "src.callbacks.map_callbacks",
        "documentation": {}
    },
    {
        "label": "backtrack",
        "kind": 2,
        "importPath": "src.callbacks.map_callbacks",
        "description": "src.callbacks.map_callbacks",
        "peekOfCode": "def backtrack(\n    _,\n    points,\n    lines,\n    map_center,\n    all_clicks,\n):\n    step = all_clicks - 1\n    sampletimes = sorted(processed_forward.keys())\n    if step > 0 and all_clicks <= len(sampletimes):",
        "detail": "src.callbacks.map_callbacks",
        "documentation": {}
    },
    {
        "label": "highlight_emission",
        "kind": 2,
        "importPath": "src.callbacks.map_callbacks",
        "description": "src.callbacks.map_callbacks",
        "peekOfCode": "def highlight_emission(prob_value, all_clicks, normal_lines):\n    current_stage = all_clicks - 1\n    sampletimes = sorted(processed_forward.keys())\n    if all_clicks < len(sampletimes):\n        if prob_value == \"emission\":\n            lines = []\n            for d in normal_lines:\n                if (\n                    d[\"props\"].get(\"children\") <= current_stage\n                    and d[\"props\"][\"pathOptions\"].get(\"color\") == \"blue\"",
        "detail": "src.callbacks.map_callbacks",
        "documentation": {}
    },
    {
        "label": "finish_algorithm",
        "kind": 2,
        "importPath": "src.callbacks.map_callbacks",
        "description": "src.callbacks.map_callbacks",
        "peekOfCode": "def finish_algorithm(_, points, lines, map_center, all_clicks):\n    sampletimes = sorted(processed_forward.keys())\n    full = len(sampletimes)\n    for idx in range(all_clicks, full):\n        sampletime = sampletimes[idx]\n        sample_data = processed_forward[sampletime]\n        point = sample_data[\"point\"]\n        heading = sample_data[\"heading\"]\n        map_center = point\n        line_coordinates = sample_data[\"lines\"]",
        "detail": "src.callbacks.map_callbacks",
        "documentation": {}
    },
    {
        "label": "toggle_buttons",
        "kind": 2,
        "importPath": "src.callbacks.style_callbacks",
        "description": "src.callbacks.style_callbacks",
        "peekOfCode": "def toggle_buttons(\n    control_value,\n    points,\n    next_button_style,\n    back_button_style,\n    prob_style,\n    all_clicks,\n):\n    all_childs = len(points)\n    if control_value == \"Pause\":",
        "detail": "src.callbacks.style_callbacks",
        "documentation": {}
    },
    {
        "label": "toggle_gradient",
        "kind": 2,
        "importPath": "src.callbacks.style_callbacks",
        "description": "src.callbacks.style_callbacks",
        "peekOfCode": "def toggle_gradient(prob_value, gradient_style):\n    if prob_value != \"emission\":\n        gradient_style[\"display\"] = \"none\"\n    else:\n        gradient_style[\"display\"] = \"block\"\n    return gradient_style\n@callback(\n    Output(\"finish-button\", \"style\"),\n    Input(\"finish-button\", \"n_clicks\"),\n    State(\"finish-button\", \"style\"),",
        "detail": "src.callbacks.style_callbacks",
        "documentation": {}
    },
    {
        "label": "remove_finish_button",
        "kind": 2,
        "importPath": "src.callbacks.style_callbacks",
        "description": "src.callbacks.style_callbacks",
        "peekOfCode": "def remove_finish_button(n_clicks, style):\n    if n_clicks == 1:\n        style[\"display\"] = \"none\"\n        return style\n    else:\n        return style",
        "detail": "src.callbacks.style_callbacks",
        "documentation": {}
    },
    {
        "label": "create_controls",
        "kind": 2,
        "importPath": "src.components.controls",
        "description": "src.components.controls",
        "peekOfCode": "def create_controls():\n    return html.Div(\n        style={\n            \"display\": \"flex\",\n            \"flexDirection\": \"column\",\n            \"gap\": \"1vw\",\n            \"width\": \"8vw\",\n            \"justifyContent\": \"flex-start\",\n            \"alignItems\": \"center\",\n            \"minWidth\": \"100px\",",
        "detail": "src.components.controls",
        "documentation": {}
    },
    {
        "label": "create_layout",
        "kind": 2,
        "importPath": "src.components.layout",
        "description": "src.components.layout",
        "peekOfCode": "def create_layout():\n    return html.Div(\n        style={\n            \"backgroundColor\": \"#2E2E2E\",\n            \"backgroundSize\": \"auto\",\n            \"color\": \"#FFFFFF\",\n            \"border\": \"none\",\n            \"height\": \"100vh\",\n            \"width\": \"100vw\",\n            \"outlineOffset\": \"0px\",",
        "detail": "src.components.layout",
        "documentation": {}
    },
    {
        "label": "get_initial_center",
        "kind": 2,
        "importPath": "src.components.map",
        "description": "src.components.map",
        "peekOfCode": "def get_initial_center():\n    first_point = forward[\"features\"][0][\"geometry\"][\"coordinates\"]\n    return [first_point[1], first_point[0]]  # Swap lat, long\ndef create_map():\n    return html.Div(\n        style={\n            \"width\": \"90vw\",\n            \"height\": \"90vh\",\n            \"border\": \"2px solid #FFFFFF\",\n            \"borderRadius\": \"10px\",",
        "detail": "src.components.map",
        "documentation": {}
    },
    {
        "label": "create_map",
        "kind": 2,
        "importPath": "src.components.map",
        "description": "src.components.map",
        "peekOfCode": "def create_map():\n    return html.Div(\n        style={\n            \"width\": \"90vw\",\n            \"height\": \"90vh\",\n            \"border\": \"2px solid #FFFFFF\",\n            \"borderRadius\": \"10px\",\n            \"overflow\": \"hidden\",\n        },\n        children=[",
        "detail": "src.components.map",
        "documentation": {}
    },
    {
        "label": "create_popup",
        "kind": 2,
        "importPath": "src.components.popup",
        "description": "src.components.popup",
        "peekOfCode": "def create_popup():\n    return dbc.Modal(\n        [\n            dbc.ModalHeader(\n                dbc.ModalTitle(\n                    \"Diagram til overgang mellem veje.\",\n                    style={\n                        \"fontSize\": \"xx-large\",\n                    },\n                ),",
        "detail": "src.components.popup",
        "documentation": {}
    },
    {
        "label": "full_screen_spinner",
        "kind": 2,
        "importPath": "src.components.popup",
        "description": "src.components.popup",
        "peekOfCode": "def full_screen_spinner():\n    return dbc.Spinner(\n        children=html.Div(id=\"loading-output\"),\n        color=\"primary\",\n        fullscreen=True,\n        fullscreen_style={\n            \"backgroundColor\": \"rgba(255, 255, 255, 0.1)\",\n        },\n    )",
        "detail": "src.components.popup",
        "documentation": {}
    },
    {
        "label": "group_data_by_sampletime",
        "kind": 2,
        "importPath": "src.data.process_data",
        "description": "src.data.process_data",
        "peekOfCode": "def group_data_by_sampletime(data: dict):\n    lines_by_sampletime = {}\n    for feature in data[\"features\"]:\n        sampletime = feature[\"properties\"][\"SAMPLE_TIME\"]\n        point = feature[\"geometry\"][\"coordinates\"]\n        point = [point[1], point[0]]  # Swap lat, long\n        line_geometry = feature[\"properties\"].get(\"line_geometry\", [])\n        heading = feature[\"properties\"].get(\"heading_calc\", None)\n        bearing = feature[\"properties\"].get(\"bearing\", [])\n        forgrening = feature[\"properties\"].get(\"FORGRENING\", [])",
        "detail": "src.data.process_data",
        "documentation": {}
    },
    {
        "label": "parse_line_string",
        "kind": 2,
        "importPath": "src.data.process_lines",
        "description": "src.data.process_lines",
        "peekOfCode": "def parse_line_string(line_string):\n    coords = re.findall(r\"([-\\d\\.]+) ([\\d\\.]+)\", line_string)\n    return [[float(coord[1]), float(coord[0])] for coord in coords]\ndef fix_line_coordinates(line):\n    if isinstance(line, str):\n        return parse_line_string(line)\n    elif isinstance(line, list):\n        return [[coord[1], coord[0]] for coord in line]  # Swap lat, long\n    return []",
        "detail": "src.data.process_lines",
        "documentation": {}
    },
    {
        "label": "fix_line_coordinates",
        "kind": 2,
        "importPath": "src.data.process_lines",
        "description": "src.data.process_lines",
        "peekOfCode": "def fix_line_coordinates(line):\n    if isinstance(line, str):\n        return parse_line_string(line)\n    elif isinstance(line, list):\n        return [[coord[1], coord[0]] for coord in line]  # Swap lat, long\n    return []",
        "detail": "src.data.process_lines",
        "documentation": {}
    },
    {
        "label": "button_style",
        "kind": 2,
        "importPath": "src.utils.button_utils",
        "description": "src.utils.button_utils",
        "peekOfCode": "def button_style():\n    return {\n        \"backgroundColor\": \"#444444\",\n        \"color\": \"#FFFFFF\",\n        \"border\": \"none\",\n        \"padding\": \"10px 20px\",\n        \"borderRadius\": \"5%\",\n        \"cursor\": \"pointer\",\n        \"fontSize\": \"16px\",\n        \"width\": \"100%\",  # Ensures full width inside parent div",
        "detail": "src.utils.button_utils",
        "documentation": {}
    },
    {
        "label": "calculate_direction_diff",
        "kind": 2,
        "importPath": "src.utils.line_utils",
        "description": "src.utils.line_utils",
        "peekOfCode": "def calculate_direction_diff(heading: int, bearing: int, forgrening: str):\n    \"\"\"\n    Calculate the difference between\n    heading_calc and bearing.\n    Returns:\n        float: The difference in heading and bearing.\n    \"\"\"\n    rev_bearing = (bearing + 180) % 360\n    # One way streets listed in wrong direction\n    reverse = [\"2\", \"2A\", \"4\", \"6\", \"6A\", \"8\"]",
        "detail": "src.utils.line_utils",
        "documentation": {}
    },
    {
        "label": "rgba_to_rgb",
        "kind": 2,
        "importPath": "src.utils.line_utils",
        "description": "src.utils.line_utils",
        "peekOfCode": "def rgba_to_rgb(rgba):\n    \"\"\"Convert RGBA tuple to 'rgb(r, g, b)' string.\"\"\"\n    r, g, b, _ = [int(c * 255) for c in rgba]  # Convert to 0-255 range\n    return f\"rgb({r}, {g}, {b})\"  # Format as CSS-compatible RGB\ndef get_color_from_angle(angle):\n    \"\"\"\n    Get the RGBA color corresponding to an angle (0-360°).\n    \"\"\"\n    colors = [\n        (0, 0.404, 0.106, 1),  # Color 1",
        "detail": "src.utils.line_utils",
        "documentation": {}
    },
    {
        "label": "get_color_from_angle",
        "kind": 2,
        "importPath": "src.utils.line_utils",
        "description": "src.utils.line_utils",
        "peekOfCode": "def get_color_from_angle(angle):\n    \"\"\"\n    Get the RGBA color corresponding to an angle (0-360°).\n    \"\"\"\n    colors = [\n        (0, 0.404, 0.106, 1),  # Color 1\n        (0.004, 0.518, 0.286, 1),  # Color 2\n        (0.008, 0.471, 0.525, 1),  # Color 3\n        (0.012, 0.412, 0.773, 1),  # Color 4\n        (0, 0.322, 1, 1),  # Color 5",
        "detail": "src.utils.line_utils",
        "documentation": {}
    },
    {
        "label": "process_lines_with_fix",
        "kind": 2,
        "importPath": "src.utils.map_utils",
        "description": "src.utils.map_utils",
        "peekOfCode": "def process_lines_with_fix(lines, color, children):\n    \"\"\"Fixes line coordinates and returns Polyline objects.\"\"\"\n    return [\n        dl.Polyline(\n            positions=fix_line_coordinates(line),\n            pathOptions={\"color\": color},\n            children=children,\n        )\n        for line in lines\n        if fix_line_coordinates(line)",
        "detail": "src.utils.map_utils",
        "documentation": {}
    },
    {
        "label": "create_point_marker",
        "kind": 2,
        "importPath": "src.utils.map_utils",
        "description": "src.utils.map_utils",
        "peekOfCode": "def create_point_marker(point, color, children):\n    \"\"\"Creates a Circle marker for a given point.\"\"\"\n    return dl.Circle(\n        center=point,\n        radius=5,\n        pathOptions={\"color\": color},\n        children=children,\n    )\ndef create_heading_line(point, heading, color, children):\n    \"\"\"Creates a heading direction line for a given point and heading.\"\"\"",
        "detail": "src.utils.map_utils",
        "documentation": {}
    },
    {
        "label": "create_heading_line",
        "kind": 2,
        "importPath": "src.utils.map_utils",
        "description": "src.utils.map_utils",
        "peekOfCode": "def create_heading_line(point, heading, color, children):\n    \"\"\"Creates a heading direction line for a given point and heading.\"\"\"\n    if heading is None:\n        return None\n    heading_length = 0.0006  # Adjust for visualization\n    heading_rad = math.radians(heading)\n    end_point = [\n        point[0] + heading_length * math.cos(heading_rad),\n        point[1] + heading_length * math.sin(heading_rad),\n    ]",
        "detail": "src.utils.map_utils",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Dash(\n    __name__,\n    external_stylesheets=[\n        dbc.themes.DARKLY,\n        dbc.icons.BOOTSTRAP,\n    ],\n)\nserver = app.server\napp.layout = layout.create_layout()  # Set the layout\nif __name__ == \"__main__\":",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "server = app.server\napp.layout = layout.create_layout()  # Set the layout\nif __name__ == \"__main__\":\n    app.run_server(debug=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.layout",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.layout = layout.create_layout()  # Set the layout\nif __name__ == \"__main__\":\n    app.run_server(debug=False)",
        "detail": "app",
        "documentation": {}
    }
]
